{"ast":null,"code":"import firebase from 'firebase';\nvar db = firebase.firestore();\n/**\n * Sends order to the firebase DB\n * @param {*} order - object containing the details of the order\n */\n\nvar CompleteOrder = function CompleteOrder(order) {\n  var email = order.email,\n      total = order.total,\n      date = order.date,\n      vendor = order.vendor,\n      price = order.price;\n  console.log(\"DB: \", \"\".concat(email, \" # \").concat(total, \" # \").concat(date, \" # \").concat(vendor, \" # \").concat(price, \" #\")); // Add a new document with a generated id.\n\n  db.collection(\"orders\").add({\n    date: date,\n    email: email,\n    item: total,\n    price: price,\n    vendor: vendor\n  }).then(function (docRef) {\n    console.log(\"Document written with ID: \", docRef.id);\n  }).catch(function (error) {\n    console.error(\"Error adding document: \", error);\n  });\n};\n/**\n * \n * @param {*} inquiry request order details\n */\n\n\nvar GetOrders = function GetOrders(inquiry) {\n  //stuff\n  var ordersRef = db.collection(\"orders\");\n  ordersRef.where(\"email\", \"==\", \"\".concat(inquiry.email)).get().then(function (querySnapshot) {\n    if (!querySnapshot.empty) {\n      inquiry.callback(querySnapshot);\n    }\n  }).catch(function (error) {\n    console.error(\"DB: \", error);\n  });\n};\n\nexport { CompleteOrder, GetOrders };","map":{"version":3,"sources":["/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/src/Services/DB.js"],"names":["firebase","db","firestore","CompleteOrder","order","email","total","date","vendor","price","console","log","collection","add","item","then","docRef","id","catch","error","GetOrders","inquiry","ordersRef","where","get","querySnapshot","empty","callback"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,IAAMC,EAAE,GAAGD,QAAQ,CAACE,SAAT,EAAX;AAEA;;;;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,MAErBC,KAFqB,GAEiBD,KAFjB,CAErBC,KAFqB;AAAA,MAEdC,KAFc,GAEiBF,KAFjB,CAEdE,KAFc;AAAA,MAEPC,IAFO,GAEiBH,KAFjB,CAEPG,IAFO;AAAA,MAEDC,MAFC,GAEiBJ,KAFjB,CAEDI,MAFC;AAAA,MAEOC,KAFP,GAEiBL,KAFjB,CAEOK,KAFP;AAI7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,YAAuBN,KAAvB,gBAAkCC,KAAlC,gBAA6CC,IAA7C,gBAAuDC,MAAvD,gBAAmEC,KAAnE,SAJ6B,CAM7B;;AACAR,EAAAA,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4B;AACxBN,IAAAA,IAAI,EAAEA,IADkB;AAExBF,IAAAA,KAAK,EAAEA,KAFiB;AAGxBS,IAAAA,IAAI,EAAER,KAHkB;AAIxBG,IAAAA,KAAK,EAAEA,KAJiB;AAKxBD,IAAAA,MAAM,EAAEA;AALgB,GAA5B,EAOKO,IAPL,CAOU,UAAUC,MAAV,EAAkB;AACpBN,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CK,MAAM,CAACC,EAAjD;AACH,GATL,EAUKC,KAVL,CAUW,UAAUC,KAAV,EAAiB;AACpBT,IAAAA,OAAO,CAACS,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACH,GAZL;AAcH,CArBD;AAuBA;;;;;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAE3B;AACA,MAAIC,SAAS,GAAGrB,EAAE,CAACW,UAAH,CAAc,QAAd,CAAhB;AAEAU,EAAAA,SAAS,CAACC,KAAV,CAAgB,OAAhB,EAAyB,IAAzB,YAAkCF,OAAO,CAAChB,KAA1C,GAAmDmB,GAAnD,GACKT,IADL,CACU,UAACU,aAAD,EAAmB;AACrB,QAAI,CAACA,aAAa,CAACC,KAAnB,EAA0B;AACtBL,MAAAA,OAAO,CAACM,QAAR,CAAiBF,aAAjB;AACH;AACJ,GALL,EAMKP,KANL,CAMW,UAACC,KAAD,EAAW;AACdT,IAAAA,OAAO,CAACS,KAAR,CAAc,MAAd,EAAsBA,KAAtB;AACH,GARL;AAUH,CAfD;;AAiBA,SAAShB,aAAT,EAAwBiB,SAAxB","sourcesContent":["import firebase from 'firebase';\n\nconst db = firebase.firestore();\n\n/**\n * Sends order to the firebase DB\n * @param {*} order - object containing the details of the order\n */\nconst CompleteOrder = (order) => {\n\n    const { email, total, date, vendor, price } = order;\n\n    console.log(\"DB: \", `${email} # ${total} # ${date} # ${vendor} # ${price} #`)\n\n    // Add a new document with a generated id.\n    db.collection(\"orders\").add({\n        date: date,\n        email: email,\n        item: total,\n        price: price,\n        vendor: vendor\n    })\n        .then(function (docRef) {\n            console.log(\"Document written with ID: \", docRef.id);\n        })\n        .catch(function (error) {\n            console.error(\"Error adding document: \", error);\n        });\n\n};\n\n/**\n * \n * @param {*} inquiry request order details\n */\nconst GetOrders = (inquiry) => {\n\n    //stuff\n    let ordersRef = db.collection(\"orders\");\n\n    ordersRef.where(\"email\", \"==\", `${inquiry.email}`).get()\n        .then((querySnapshot) => {\n            if (!querySnapshot.empty) {\n                inquiry.callback(querySnapshot);\n            }\n        })\n        .catch((error) => {\n            console.error(\"DB: \", error);\n        });\n\n};\n\nexport { CompleteOrder, GetOrders };"]},"metadata":{},"sourceType":"module"}