{"ast":null,"code":"import * as firebase from 'firebase';\nvar db = firebase.firestore();\n/**\n * Sends order to the firebase DB\n * @param {*} order - object containing the details of the order\n */\n\nvar CompleteOrder = function CompleteOrder(order) {\n  var email = order.email,\n      item = order.item,\n      date = order.date,\n      vendor = order.vendor,\n      total = order.total;\n  console.log(\"DB: \", \"\".concat(email, \" | \").concat(item, \" | \").concat(date, \" | \").concat(vendor, \" | \").concat(total, \" |\"));\n  db.collection(\"orders\").add({\n    date: date,\n    email: email,\n    item: item,\n    price: total,\n    vendor: vendor\n  }).then(function (docRef) {\n    console.log(\"Document written with ID: \", docRef.id);\n    return docRef.id;\n  }).catch(function (error) {\n    console.error(\"Error adding document: \", error);\n  });\n};\n\nvar GetOrder = function GetOrder(request) {\n  console.log(\"DB request/vendor/id\", request.vendor.id);\n  var ordersRef = db.collection(\"orders\");\n  ordersRef.where(\"id\", \"==\", \"\".concat(request.vendor.id)).get().then(function (querySnapshot) {\n    if (!querySnapshot.empty) {\n      request.callback(querySnapshot);\n    }\n  }).catch(function (error) {\n    console.error(\"DB: \", error);\n  });\n};\n/**\n * \n * @param {*} inquiry request order details\n */\n\n\nvar GetOrders = function GetOrders(inquiry) {\n  //stuff\n  var ordersRef = db.collection(\"orders\");\n  ordersRef.where(\"email\", \"==\", \"\".concat(inquiry.email)).get().then(function (querySnapshot) {\n    if (!querySnapshot.empty) {\n      inquiry.callback(querySnapshot);\n    }\n  }).catch(function (error) {\n    console.error(\"DB: \", error);\n  });\n};\n\nexport { CompleteOrder, GetOrder, GetOrders };","map":{"version":3,"sources":["/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/src/Services/DB.js"],"names":["firebase","db","firestore","CompleteOrder","order","email","item","date","vendor","total","console","log","collection","add","price","then","docRef","id","catch","error","GetOrder","request","ordersRef","where","get","querySnapshot","empty","callback","GetOrders","inquiry"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AAEA,IAAMC,EAAE,GAAGD,QAAQ,CAACE,SAAT,EAAX;AAEA;;;;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,MAErBC,KAFqB,GAEgBD,KAFhB,CAErBC,KAFqB;AAAA,MAEdC,IAFc,GAEgBF,KAFhB,CAEdE,IAFc;AAAA,MAERC,IAFQ,GAEgBH,KAFhB,CAERG,IAFQ;AAAA,MAEFC,MAFE,GAEgBJ,KAFhB,CAEFI,MAFE;AAAA,MAEMC,KAFN,GAEgBL,KAFhB,CAEMK,KAFN;AAI7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,YAAuBN,KAAvB,gBAAkCC,IAAlC,gBAA4CC,IAA5C,gBAAsDC,MAAtD,gBAAkEC,KAAlE;AAEAR,EAAAA,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4B;AACxBN,IAAAA,IAAI,EAAEA,IADkB;AAExBF,IAAAA,KAAK,EAAEA,KAFiB;AAGxBC,IAAAA,IAAI,EAAEA,IAHkB;AAIxBQ,IAAAA,KAAK,EAAEL,KAJiB;AAKxBD,IAAAA,MAAM,EAAEA;AALgB,GAA5B,EAOKO,IAPL,CAOU,UAAUC,MAAV,EAAkB;AACpBN,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CK,MAAM,CAACC,EAAjD;AACA,WAAOD,MAAM,CAACC,EAAd;AACH,GAVL,EAWKC,KAXL,CAWW,UAAUC,KAAV,EAAiB;AACpBT,IAAAA,OAAO,CAACS,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACH,GAbL;AAeH,CArBD;;AAuBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD,EAAa;AAC1BX,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCU,OAAO,CAACb,MAAR,CAAeS,EAAnD;AACA,MAAIK,SAAS,GAAGrB,EAAE,CAACW,UAAH,CAAc,QAAd,CAAhB;AACAU,EAAAA,SAAS,CAACC,KAAV,CAAgB,IAAhB,EAAsB,IAAtB,YAA+BF,OAAO,CAACb,MAAR,CAAeS,EAA9C,GAAoDO,GAApD,GACKT,IADL,CACU,UAACU,aAAD,EAAmB;AACrB,QAAI,CAACA,aAAa,CAACC,KAAnB,EAA0B;AACtBL,MAAAA,OAAO,CAACM,QAAR,CAAiBF,aAAjB;AACH;AACJ,GALL,EAMKP,KANL,CAMW,UAACC,KAAD,EAAW;AACdT,IAAAA,OAAO,CAACS,KAAR,CAAc,MAAd,EAAsBA,KAAtB;AACH,GARL;AASH,CAZD;AAcA;;;;;;AAIA,IAAMS,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAE3B;AACA,MAAIP,SAAS,GAAGrB,EAAE,CAACW,UAAH,CAAc,QAAd,CAAhB;AAEAU,EAAAA,SAAS,CAACC,KAAV,CAAgB,OAAhB,EAAyB,IAAzB,YAAkCM,OAAO,CAACxB,KAA1C,GAAmDmB,GAAnD,GACKT,IADL,CACU,UAACU,aAAD,EAAmB;AACrB,QAAI,CAACA,aAAa,CAACC,KAAnB,EAA0B;AACtBG,MAAAA,OAAO,CAACF,QAAR,CAAiBF,aAAjB;AACH;AACJ,GALL,EAMKP,KANL,CAMW,UAACC,KAAD,EAAW;AACdT,IAAAA,OAAO,CAACS,KAAR,CAAc,MAAd,EAAsBA,KAAtB;AACH,GARL;AAUH,CAfD;;AAiBA,SAAShB,aAAT,EAAwBiB,QAAxB,EAAkCQ,SAAlC","sourcesContent":["import * as firebase from 'firebase';\n\nconst db = firebase.firestore();\n\n/**\n * Sends order to the firebase DB\n * @param {*} order - object containing the details of the order\n */\nconst CompleteOrder = (order) => {\n\n    const { email, item, date, vendor, total } = order;\n\n    console.log(\"DB: \", `${email} | ${item} | ${date} | ${vendor} | ${total} |`);\n\n    db.collection(\"orders\").add({\n        date: date,\n        email: email,\n        item: item,\n        price: total,\n        vendor: vendor\n    })\n        .then(function (docRef) {\n            console.log(\"Document written with ID: \", docRef.id);\n            return docRef.id\n        })\n        .catch(function (error) {\n            console.error(\"Error adding document: \", error);\n        });\n\n};\n\nconst GetOrder = (request) => {\n    console.log(\"DB request/vendor/id\", request.vendor.id);\n    let ordersRef = db.collection(\"orders\");\n    ordersRef.where(\"id\", \"==\", `${request.vendor.id}`).get()\n        .then((querySnapshot) => {\n            if (!querySnapshot.empty) {\n                request.callback(querySnapshot);\n            }\n        })\n        .catch((error) => {\n            console.error(\"DB: \", error);\n        });\n}\n\n/**\n * \n * @param {*} inquiry request order details\n */\nconst GetOrders = (inquiry) => {\n\n    //stuff\n    let ordersRef = db.collection(\"orders\");\n\n    ordersRef.where(\"email\", \"==\", `${inquiry.email}`).get()\n        .then((querySnapshot) => {\n            if (!querySnapshot.empty) {\n                inquiry.callback(querySnapshot);\n            }\n        })\n        .catch((error) => {\n            console.error(\"DB: \", error);\n        });\n\n};\n\nexport { CompleteOrder, GetOrder, GetOrders };"]},"metadata":{},"sourceType":"module"}