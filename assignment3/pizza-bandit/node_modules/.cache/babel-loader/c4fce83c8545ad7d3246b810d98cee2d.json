{"ast":null,"code":"import _defineProperty from \"/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Home from './components/home';\nimport firebase from './Services/Firebase';\nimport SignInForm from './components/signin/signinForm';\nimport Mapbox from './components/map/map';\nimport { CompleteOrder } from './Services/DB';\n/**\n * array to store selected items in a cart\n */\n\nvar selection = [];\n/**\n * array to store the prices of the selected items from the cart\n */\n\nvar price = [];\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      email: '',\n      password: '',\n      userAuthenticated: false,\n      formErrors: {\n        email: '',\n        password: '',\n        errors: ''\n      },\n      emailValid: false,\n      passwordValid: false,\n      formValid: false,\n      formresults: '',\n      mapstyle: 'light',\n      lat: '',\n      lng: '',\n      geolocerror: '',\n      user: {},\n      orders: {\n        date: '',\n        email: '',\n        item: [],\n        price: [],\n        vendor: ''\n      },\n      cards: {\n        item: '',\n        selection: []\n      },\n      randomPlace: [],\n      selectedPlace: []\n    };\n\n    _this.handleUserInput = function (e) {\n      var name = e.target.name;\n      var value = e.target.value;\n      return _this.setState(_defineProperty({}, name, value), function () {\n        _this.validateField(name, value);\n      });\n    };\n\n    _this.handleLoginFormSubmission = function (e) {\n      e.preventDefault();\n      firebase.auth().signInWithEmailAndPassword(_this.state.email, _this.state.password).then(function () {\n        _this.setState({\n          formErrors: {\n            errors: ''\n          }\n        });\n      }).catch(function (error) {\n        _this.setErrorMessage(error);\n      });\n    };\n\n    _this.handleLogout = function () {\n      firebase.auth().signOut();\n    };\n\n    _this.handleSelection = function (choice, selected, amt) {\n      _this.setState({\n        cards: {\n          selected: selected\n        }\n      });\n\n      selected ? selection.push(choice) && price.push(amt) : selection.pop(choice) && price.pop(amt);\n    };\n\n    _this.handleOrder = function () {\n      selection.length === 0 ? _this.setState({\n        formErrors: {\n          errors: 'Your Cart is empty'\n        }\n      }) : _this.placeOrder();\n    };\n\n    _this.setCoords = function (lat, lng) {\n      _this.setState({\n        lat: lat,\n        lng: lng\n      });\n    };\n\n    _this.handleSentRandomPlace = function (place) {\n      console.log(\"Random place:\", place);\n\n      _this.setState({\n        randomPlace: place\n      });\n\n      return place;\n    };\n\n    _this.handleSelectedPlace = function (selectedPlace) {\n      _this.setState({\n        selectedPlace: selectedPlace\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.authListener();\n    }\n    /**\n     * Contacts firebase to determine if a user is logged in or not.\n     * @True Sets the state of userAuthenticated to true and email to the returned email\n     * @False Sets the state of user to an empty string  \n     */\n\n  }, {\n    key: \"authListener\",\n    value: function authListener() {\n      var _this2 = this;\n\n      firebase.auth().onAuthStateChanged(function (user) {\n        user ? _this2.setState({\n          user: {\n            userAuthenticated: true,\n            email: user.email\n          }\n        }) : _this2.setState({\n          user: ''\n        });\n      });\n    }\n    /**\n     * When user types in an input field, store the name and value of the target element.\n     * Then set the state of the key value pair.\n     * Call `validateField()` and pass in the name/value of the target element\n     * @param {*} e - represents the `onChange` event\n     */\n\n  }, {\n    key: \"validateField\",\n\n    /**\n     * Validate user input using `RegExp()` (regular expression)\n     * @param {*} fieldName - name attribute of the target element\n     * @param {*} value - value attribute of the target element\n     */\n    value: function validateField(fieldName, value) {\n      var fieldValidationErrors = this.state.formErrors;\n      var emailValid = this.state.emailValid;\n      var passwordValid = this.state.passwordValid;\n      var emailRegex = new RegExp(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n      var mediumRegex = new RegExp(\"^(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\n\n      switch (fieldName) {\n        case 'email':\n          emailValid = value.match(emailRegex);\n          fieldValidationErrors.email = emailValid ? '' : ' invalid email';\n          break;\n\n        case 'password':\n          passwordValid = value.match(mediumRegex);\n          fieldValidationErrors.password = passwordValid ? '' : ' needs 8 characters or more, at least 1 number, and one capitalized letter';\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        formErrors: fieldValidationErrors,\n        emailValid: emailValid,\n        passwordValid: passwordValid\n      }, this.validateForm);\n    }\n    /**\n     * Sets the state of formValid for email and password\n     */\n\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      this.setState({\n        formValid: this.state.emailValid && this.state.passwordValid\n      });\n    }\n    /**\n     * When user submits the signIn form, the email and passowrd are sent to firebase for authentication.\n     * @param {*} e - represents the event of clicking the signin button on the sign in form\n     * Resets the state of error messages from state.\n     * If there is an error, `setErrorMessage(error)` is called.\n     */\n\n  }, {\n    key: \"setErrorMessage\",\n\n    /**\n     * Set the error message returned from firebase to the formErrors: errors state\n     * @param {*} error \n     */\n    value: function setErrorMessage(error) {\n      var errMessage = error.message;\n      this.setState({\n        formErrors: {\n          errors: errMessage\n        }\n      });\n    }\n    /**\n     * Signs the authenticated user out.\n     */\n\n  }, {\n    key: \"placeOrder\",\n\n    /**\n     * Resets the error in state to an empty string.\n     * Calls the `addItemsToOrder()` method to construct an orders object\n     * TODO: redirect to order detail page\n     */\n    value: function placeOrder() {\n      this.setState({\n        formErrors: {\n          errors: ''\n        }\n      });\n\n      function addNums(total, num) {\n        return total + num;\n      }\n\n      var total = price.reduce(addNums);\n      var orders = this.addItemsToOrder(total);\n      console.log('Placed order', orders);\n      CompleteOrder(orders); //<Redirect to='/Details' />\n    }\n    /**\n     * Adds Items to an order and constructs an order object\n     * @returns the orders object\n     */\n\n  }, {\n    key: \"addItemsToOrder\",\n    value: function addItemsToOrder(total) {\n      var date = new Date();\n      var email = this.state.user.email;\n      var item = selection; // change later\n\n      this.state.selectedPlace ? vendor = this.state.selectedPlace : this.state.randomPlace;\n      var orders = {\n        date: date,\n        email: email,\n        item: item,\n        total: total,\n        vendor: vendor\n      };\n      return orders;\n    }\n    /**\n     * sets state from lat/lng passed from child\n     * @param {*} lat lattitiude set by mapbox\n     * @param {*} lng longitude set by mapbox\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          formErrors = _this$state.formErrors,\n          user = _this$state.user,\n          cards = _this$state.cards,\n          lat = _this$state.lat,\n          lng = _this$state.lng;\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Header, {\n        user: user,\n        logout: this.handleLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render() {\n          return !user ? React.createElement(SignInForm, {\n            onChange: _this3.handleUserInput,\n            onClick: _this3.handleLoginFormSubmission,\n            log: formErrors,\n            lat: lat,\n            lng: lng,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 260\n            },\n            __self: this\n          }) : React.createElement(Mapbox, {\n            setCoords: _this3.setCoords,\n            lat: lat,\n            lng: lng,\n            sendRandomPlace: _this3.handleSentRandomPlace,\n            selectedPlace: _this3.handleSelectedPlace,\n            formErrors: formErrors,\n            user: user,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/home\",\n        render: function render() {\n          return React.createElement(Home, {\n            onChange: _this3.handleUserInput,\n            log: formErrors,\n            cards: cards,\n            onCardClick: _this3.handleSelection,\n            order: _this3.handleOrder,\n            selection: selection,\n            price: price,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 278\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/johncunningham/Desktop/Spring 2019/CIDM4385-Mobile-App-Dev/CIDM4385/assignment3/pizza-bandit/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Header","Footer","Home","firebase","SignInForm","Mapbox","CompleteOrder","selection","price","App","state","email","password","userAuthenticated","formErrors","errors","emailValid","passwordValid","formValid","formresults","mapstyle","lat","lng","geolocerror","user","orders","date","item","vendor","cards","randomPlace","selectedPlace","handleUserInput","e","name","target","value","setState","validateField","handleLoginFormSubmission","preventDefault","auth","signInWithEmailAndPassword","then","catch","error","setErrorMessage","handleLogout","signOut","handleSelection","choice","selected","amt","push","pop","handleOrder","length","placeOrder","setCoords","handleSentRandomPlace","place","console","log","handleSelectedPlace","authListener","onAuthStateChanged","fieldName","fieldValidationErrors","emailRegex","RegExp","mediumRegex","match","validateForm","errMessage","message","addNums","total","num","reduce","addItemsToOrder","Date"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Home from './components/home';\nimport firebase from './Services/Firebase';\nimport SignInForm from './components/signin/signinForm';\nimport Mapbox from './components/map/map';\nimport { CompleteOrder } from './Services/DB'\n\n/**\n * array to store selected items in a cart\n */\nlet selection = [];\n/**\n * array to store the prices of the selected items from the cart\n */\nlet price = [];\n\nclass App extends Component {\n  state = {\n    email: '',\n    password: '',\n    userAuthenticated: false,\n    formErrors: { email: '', password: '', errors: '' },\n    emailValid: false,\n    passwordValid: false,\n    formValid: false,\n    formresults: '',\n    mapstyle: 'light',\n    lat: '',\n    lng: '',\n    geolocerror: '',\n    user: {},\n    orders: {\n      date: '',\n      email: '',\n      item: [],\n      price: [],\n      vendor: ''\n    },\n    cards: {\n      item: '',\n      selection: []\n    },\n    randomPlace: [],\n    selectedPlace: []\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  /**\n   * Contacts firebase to determine if a user is logged in or not.\n   * @True Sets the state of userAuthenticated to true and email to the returned email\n   * @False Sets the state of user to an empty string  \n   */\n  authListener() {\n    firebase.auth().onAuthStateChanged((user) => {\n      (user) ? this.setState({ user: { userAuthenticated: true, email: user.email } }) : this.setState({\n        user: ''\n      });\n    })\n  }\n\n  /**\n   * When user types in an input field, store the name and value of the target element.\n   * Then set the state of the key value pair.\n   * Call `validateField()` and pass in the name/value of the target element\n   * @param {*} e - represents the `onChange` event\n   */\n  handleUserInput = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    return this.setState({ [name]: value },\n      () => { this.validateField(name, value) });\n\n  };\n\n  /**\n   * Validate user input using `RegExp()` (regular expression)\n   * @param {*} fieldName - name attribute of the target element\n   * @param {*} value - value attribute of the target element\n   */\n  validateField(fieldName, value) {\n\n    let fieldValidationErrors = this.state.formErrors;\n    let emailValid = this.state.emailValid;\n    let passwordValid = this.state.passwordValid;\n    let emailRegex = new RegExp(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n    let mediumRegex = new RegExp(\"^(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\n\n    switch (fieldName) {\n      case 'email':\n        emailValid = value.match(emailRegex);\n        fieldValidationErrors.email = emailValid ? '' : ' invalid email';\n        break;\n      case 'password':\n        passwordValid = value.match(mediumRegex);\n        fieldValidationErrors.password = passwordValid ? '' : ' needs 8 characters or more, at least 1 number, and one capitalized letter';\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      formErrors: fieldValidationErrors,\n      emailValid: emailValid,\n      passwordValid: passwordValid\n    }, this.validateForm);\n  }\n\n  /**\n   * Sets the state of formValid for email and password\n   */\n  validateForm() {\n    this.setState({ formValid: this.state.emailValid && this.state.passwordValid });\n  }\n\n  /**\n   * When user submits the signIn form, the email and passowrd are sent to firebase for authentication.\n   * @param {*} e - represents the event of clicking the signin button on the sign in form\n   * Resets the state of error messages from state.\n   * If there is an error, `setErrorMessage(error)` is called.\n   */\n  handleLoginFormSubmission = (e) => {\n    e.preventDefault();\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\n      .then(() => {\n        this.setState({\n          formErrors: { errors: '' }\n        });\n      })\n      .catch((error) => { this.setErrorMessage(error) }\n      );\n  }\n\n  /**\n   * Set the error message returned from firebase to the formErrors: errors state\n   * @param {*} error \n   */\n  setErrorMessage(error) {\n    const errMessage = error.message;\n    this.setState({\n      formErrors: { errors: errMessage }\n    });\n  }\n\n  /**\n   * Signs the authenticated user out.\n   */\n  handleLogout = () => {\n    firebase.auth().signOut();\n  }\n\n  /**\n      * Appends new elements to an array.\n      * @param choice New elements of the selection Array.\n      * @param selected bool of the button clicked status.\n      * @param amt New elements of the price Array.\n      */\n  handleSelection = (choice, selected, amt) => {\n    this.setState({\n      cards: {\n        selected\n      },\n    });\n    (selected) ? selection.push(choice) && price.push(amt) : selection.pop(choice) && price.pop(amt);\n  }\n\n  /**\n    * Determines if the cart is empty.\n    * If true, set an error message to the state that is passed down as a prop.\n    * If false, the `placeOrder()` method is called\n    */\n  handleOrder = () => {\n    (selection.length === 0) ? this.setState({ formErrors: { errors: 'Your Cart is empty' } }) : this.placeOrder()\n  }\n\n  /**\n   * Resets the error in state to an empty string.\n   * Calls the `addItemsToOrder()` method to construct an orders object\n   * TODO: redirect to order detail page\n   */\n  placeOrder() {\n    this.setState({\n      formErrors: { errors: '' }\n    });\n\n    function addNums(total, num) {\n      return total + num;\n    }\n\n    let total = price.reduce(addNums);\n    const orders = this.addItemsToOrder(total);\n    console.log('Placed order', orders);\n\n    CompleteOrder(orders);\n\n    //<Redirect to='/Details' />\n  }\n\n  /**\n   * Adds Items to an order and constructs an order object\n   * @returns the orders object\n   */\n  addItemsToOrder(total) {\n    const date = new Date();\n    const email = this.state.user.email;\n    const item = selection;\n    // change later\n    (this.state.selectedPlace) ? vendor = this.state.selectedPlace : this.state.randomPlace;\n\n    const orders = { date, email, item, total, vendor };\n    return orders;\n  }\n\n  /**\n   * sets state from lat/lng passed from child\n   * @param {*} lat lattitiude set by mapbox\n   * @param {*} lng longitude set by mapbox\n   */\n  setCoords = (lat, lng) => {\n    this.setState({\n      lat,\n      lng\n    });\n  }\n\n  /**\n     * Handle a randomly-selected place from the places API\n     * @param {*} place - randonly selected pizza place\n     */\n  handleSentRandomPlace = (place) => {\n    console.log(\"Random place:\", place);\n\n    this.setState({\n      randomPlace: place\n    });\n    return place;\n  }\n\n  handleSelectedPlace = (selectedPlace) => {\n    this.setState({\n      selectedPlace\n    });\n  }\n\n  render() {\n    const { formErrors, user, cards, lat, lng } = this.state;\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header user={user}\n            logout={this.handleLogout} />\n          <Route exact path=\"/\"\n            render={() =>\n              (!user) ?\n                <SignInForm\n                  onChange={this.handleUserInput}\n                  onClick={this.handleLoginFormSubmission}\n                  log={formErrors}\n                  lat={lat}\n                  lng={lng} /> :\n                <Mapbox setCoords={this.setCoords}\n                  lat={lat}\n                  lng={lng}\n                  sendRandomPlace={this.handleSentRandomPlace}\n                  selectedPlace={this.handleSelectedPlace}\n                  formErrors={formErrors}\n                  user={user}\n                />\n\n            }\n          />\n          <Route path=\"/home\" render={() =>\n            <Home onChange={this.handleUserInput}\n              log={formErrors}\n              cards={cards}\n              onCardClick={this.handleSelection}\n              order={this.handleOrder}\n              selection={selection}\n              price={price}\n            />} />\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}